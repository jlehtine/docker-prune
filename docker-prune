#! /bin/sh

# Copyright (c) 2021 Johannes Lehtinen
# Licensed under the MIT License, see "LICENSE"

# See "./docker-prune -h" for help


# Stop on error
set -e

# Container filters selecting the stopped containers
containerfilterstopped='-f status=created -f status=exited -f status=dead'

# Check for options
untagged=false
stopped=false
running=false
tagged=false
quiet=false
force=false
while getopts husraeqf opt; do
    case "$opt" in

        h)
            cat << EOS
Removes unused Docker resources. By default removes only the dandling images.

To remove the stopped containers based on untagged images (typically left
behind by failed builds) and their anonymous volumes, use "-u" (untagged). To
remove all stopped containers and their volumes as well as unused volumes and
networks use "-s" (stopped).  To stop the running containers and then remove
resources associated with all containers, use "-r" (running).

To remove all unused images including tagged ones, use "-a" (all).

To remove everything, use "-e" (everything), implying -r -a.

See other options below.

usage: $(basename "$0") [-u] [-a] [-q] [-f]
       $(basename "$0") [-s] [-a] [-q] [-f]
       $(basename "$0") [-r] [-a] [-q] [-f]
       $(basename "$0") [-e] [-q] [-f]
       $(basename "$0") -h

options:
    -h    print this help text and exit without doing anything else
    -u    remove containers based on untagged images (by failed builds)
    -s    remove resources associated with the stopped containers
    -r    remove resources associated with all containers
    -a    remove all unused images, including tagged ones
    -e    remove everything
    -q    be quiet, suppress informative output
    -f    force it, omit all confirmation dialogs
EOS
            exit 0
            ;;

        u)
            untagged=true
            ;;

        s)
            stopped=true
            ;;

        r)
            stopped=true
            running=true
            ;;

        a)
            tagged=true
            ;;

        e)
            stopped=true
            running=true
            tagged=true
            ;;

        q)
            quiet=true
            ;;

        f)
            force=true
            ;;

        \?)
            echo "Try -h, for help" 1>&2
            exit 1
            ;;

    esac
done
if [ $# -gt $(( $OPTIND - 1 )) ]; then
    echo "Unexpected arguments" 1>&2
    echo "Try -h, for help" 1>&2
    exit 1
fi

# Should we be quiet?
isquiet () {
    [ "$quiet" = true ]
}

# Are we forced?
isforce () {
    [ "$force" = true ]
}

# Print information
echoinfo () {
    if ! isquiet; then
        echo "$@"
    fi
}

# On failure
fail () {
    echo "Failed!"
    exit 1
}

# Ask confirmation before proceeding
confirm () {
    if ! isforce; then
        if [ -t 0 ]; then
            read -p "$@ (y/N): " resp
            case "$resp" in
                y|Y)
                    echo ''
                    return 0
                    ;;
            esac
        fi
        echo 'Aborting, use -f to force without confirmation' 1>&2
        exit 1
    fi
}

# Returns an element count
count () {
    local allflag filterflag format
    allflag=
    filterflag=
    format='{{.ID}}'
    if [ "$1" = container -o "$1" = image ]; then
        allflag='-a'
    fi
    if [ "$1" = container ]; then
        filterflag="$containerfilterstopped"
    fi
    if [ "$1" = volume ]; then
        format='{{.Name}}'
    fi
    docker "$1" ls $allflag $filterflag --format "$format" | wc -l
}

# Takes an element count before pruning
countbefore () {
    isquiet || eval "${1}countbefore=\"\$(count "$1")\""
}

# Shows the number of removed elements, if any
countafter () {
    local countbefore countafter
    if ! isquiet; then
        eval countbefore="\$${1}countbefore"
        countafter="$(count "$1")" 
        if [ $countafter -lt $countbefore ]; then
            echoinfo "Removed $(( $countbefore - $countafter )) unused ${1}s"
        fi
    fi
}

# Prunes specific element
prune () {
    local allflag output
    echoinfo "Removing unused ${1}s..."
    countbefore "$1"
    allflag=
    if [ "$1" = image -a "$tagged" = true ]; then
        allflag='-a'
    fi
    output="$(LANG=C docker "$1" prune $allflag -f < /dev/null | grep -E '^Total reclaimed space: ' | ( grep -v -F 'Total reclaimed space: 0B' || true ) )" || fail
    countafter "$1"
    [ -z "$output" ] || echoinfo "$output"
    echoinfo ''
}

prune_container_untagged_image () {
    local untaggedids
    echoinfo 'Removing stopped containers based on untagged images...'
    countbefore container
    untaggedids="$(docker container ls -a $containerfilterstopped --format '{{.Image}};{{.ID}}' --no-trunc | grep -E '^sha256:' | sed -e 's/^[^;]*;//')" || fail
    if [ -n "$untaggedids" ]; then
        docker container rm -v $untaggedids > /dev/null
    fi
    countafter container
    echoinfo ''
}

# Ask for confirmation first, if not forced and removing essential elements
if ! isforce && [ "$running" = true -o "$stopped" = true -o "$untagged" = true -o "$tagged" = true ]; then
    if ! isquiet; then
        if [ "$running" = true ]; then
            echo 'Will stop the running containers:'
            docker container ls --format '- {{.Names}}'
            echo ''
            echo 'Will remove all containers:'
            docker container ls -a --format '- {{.Names}}'
            echo ''
            echo 'Will remove all volumes:'
            docker volume ls --format '- {{.Name}}'
            echo ''
        elif [ "$stopped" = true ]; then
            echo 'Will remove the stopped containers:'
            docker container ls -a $containerfilterstopped --format '- {{.Names}}'
            echo ''
            echo 'Will remove their volumes and any unused volumes'
            echo ''
        elif [ "$untagged" = true ]; then
            echo 'Will remove the stopped containers based on untagged images:'
            docker container ls -a $containerfilterstopped --format '{{.Image}};{{.Names}}' --no-trunc | grep -E '^sha256:' | sed -e 's/^[^;]*;/- /'
            echo ''
            echo 'Will remove their anonymous volumes'
            echo ''
        fi
        if [ "$tagged" = true ]; then
            if [ "$running" = true ]; then
                echo 'Will remove all images'
            else
                echo 'Will remove tagged images not used by any container'
            fi
            echo ''
        fi
    fi
    confirm 'Are you sure you want to proceed?'
fi

# First stop any running containers, if removing all containers
if [ "$running" = true ]; then
    runningids="$(docker container ls --format '{{.ID}}')" || fail
    if [ -n "$runningids" ]; then 
        echoinfo 'Stopping the running containers...'
        docker stop $runningids < /dev/null > /dev/null
        echoinfo ''
    fi
fi

# Remove stopped containers based on untagged images, if so requested
if [ "$untagged" = true -a "$stopped" = false ]; then

    # Remove stopped containers based on untagged imags
    prune_container_untagged_image
fi

# Remove unused container resources, if so requested
if [ "$stopped" = true ]; then

    # Remove stopped containers
    prune container

    # Remove unused networks
    prune network

    # Remove unused volumes
    prune volume

fi

# Remove unused images
prune image
